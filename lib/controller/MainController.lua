local Debugger = require("hotswitch-hs/lib/common/Debugger")
local TimeChecker = require("hotswitch-hs/lib/common/TimeChecker")
local Updater = require("hotswitch-hs/lib/common/Updater")
local Controller = require("hotswitch-hs/lib/controller/Controller")
local WindowModel = require("hotswitch-hs/lib/model/WindowModel")
local SettingsModel = require("hotswitch-hs/lib/model/SettingModel")
local KeyStatusModel = require("hotswitch-hs/lib/model/KeyStatusModel")
local AppWatchModel = require("hotswitch-hs/lib/model/AppWatchModel")
local PanelLayoutView = require("hotswitch-hs/lib/view/PanelLayoutView")
local HotkeyController = require("hotswitch-hs/lib/controller/HotkeyController")
local FrameCulculator = require("hotswitch-hs/lib/common/FrameCulculator")

local MainController = {}
MainController.new = function()
    local obj = Controller.new()

    obj.isRegistrationMode = false

    obj.windowModel = WindowModel.new()
    obj.settingModel = SettingsModel.new()
    obj.keyStatusModel = KeyStatusModel.new(obj.windowModel, obj.settingModel)
    obj.appWatchModel = AppWatchModel.new()

    obj.panelLayoutView = PanelLayoutView.new(obj.windowModel, obj.settingModel, obj.keyStatusModel)

    obj.hotkeyController = HotkeyController.new(obj)

    obj.panelLayoutView:setClickCallback(function(position)
        obj.windowModel:focusWindow(obj.windowModel:getCachedOrderedWindowsOrFetch()[position])
        obj:finish()
    end)

    obj.openOrClose = function(self)
        if self.panelLayoutView.isOpen then
            self.windowModel:focusPreviousWindowForCancel()
            self:finish()
        else
            -- local t1 = TimeChecker.new()

            self.windowModel.previousWindow = hs.window.frontmostWindow()

            -- Enable hotkeys before refresh windows,
            -- because refreshing windows is sometimes slow and take time.
            -- local t2 = TimeChecker.new()
            self.hotkeyController:enableHotkeys()
            -- t2:diff("MainController:enableHotkeys")
            self.panelLayoutView:activateHammerspoonWindow()
            -- t2:diff("MainController:activateHammerspoonWindow")

            self.windowModel:refreshOrderedWindows()
            -- t2:diff("MainController:refreshOrderedWindows")
            self.keyStatusModel:createKeyStatuses()
            -- t2:diff("MainController:createKeyStatuses")
            self.panelLayoutView:show()
            -- t2:diff("MainController:show")
            self.appWatchModel:watchAppliationDeactivated(function() self:finish() end)
            -- t2:diff("MainController:watchAppliationDeactivated")

            -- t1:diff("All")
        end
    end

    obj.switchToNextWindow = function(self)
        self.windowModel:focusNextWindow()
    end

    obj.clearSettings = function(self)
        self.settingModel.clear()
    end

    obj.setAutoGeneratedKeys = function(self, specifiedAutoGeneratedKeys)
        self.keyStatusModel:setSpecifiedAutoGeneratedKeys(specifiedAutoGeneratedKeys)
        self.keyStatusModel:resetAutoGeneratedKeys()
    end

    obj.enableAllSpaceWindows = function(self)
        self.windowModel:enableAllSpaceWindows()
    end

    obj.finish = function(self)
        self.panelLayoutView:hide()
        self.hotkeyController:disableHotkeys()
        self.appWatchModel:unwatchAppliationDeactivated()
    end

    obj.checkUpdate = function()
        Updater.check();
    end

    obj.addJapaneseKeyboardLayoutSymbolKeys = function(self)
        self.hotkeyController:addJapaneseKeyboardLayoutSymbolKeys()
    end

    obj.setPanelToAlwaysShowOnPrimaryScreen = function(self)
        FrameCulculator.setShowingOnMainScreen(false)
    end

    obj.addKeyModifier = function(self)
        self.hotkeyController:addKeyModifier()
    end

    ---  * loglevel - can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose', or a corresponding number
    ---    between 0 and 5
    obj.setLogLevel = function(self, logLevel)
        hs.logger.setModulesLogLevel(logLevel)
        Debugger.setLogLevel(logLevel)
    end

    --- init
    obj:setLogLevel("nothing")
    obj.hotkeyController:createHotkeys()
    obj.keyStatusModel:resetAutoGeneratedKeys()
    obj.windowModel:init()

    return obj
end
return MainController
